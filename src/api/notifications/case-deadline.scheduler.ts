import { Inject, Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { and, desc, eq, isNotNull, sql } from 'drizzle-orm';
import { DRIZZLE } from '../../database/database.module';
import {
  casePhasesTable,
  casesTable,
  CaseStatusEnum,
  notificationsTable,
  NotificationTypeEnum,
} from '../../database/schemas';
import type { DrizzleDB } from '../../database/types/drizzle';
import { NotificationsService } from './notifications.service';

@Injectable()
export class CaseDeadlineScheduler {
  private readonly logger = new Logger(CaseDeadlineScheduler.name);

  constructor(
    @Inject(DRIZZLE) private readonly db: DrizzleDB,
    private readonly notificationsService: NotificationsService,
  ) {}

  /**
   * Ki·ªÉm tra xem ƒë√£ g·ª≠i notification cho case n√†y ch∆∞a v√† ƒë√£ g·ª≠i bao l√¢u r·ªìi
   */
  private async getLastNotificationTime(
    caseId: string,
    userId: string,
  ): Promise<Date | null> {
    const lastNotification = await this.db.query.notificationsTable.findFirst({
      where: and(
        eq(notificationsTable.caseId, caseId),
        eq(notificationsTable.userId, userId),
      ),
      orderBy: [desc(notificationsTable.createdAt)],
    });

    return lastNotification?.createdAt || null;
  }

  /**
   * Ki·ªÉm tra xem c√≥ n√™n g·ª≠i notification hay kh√¥ng d·ª±a v√†o th·ªùi gian c√≤n l·∫°i v√† l·∫ßn g·ª≠i cu·ªëi
   */
  private shouldSendNotification(
    daysLeft: number,
    lastNotificationTime: Date | null,
  ): boolean {
    if (!lastNotificationTime) return true; // Ch∆∞a t·ª´ng g·ª≠i th√¨ g·ª≠i

    const now = new Date();
    const hoursSinceLastNotification =
      (now.getTime() - lastNotificationTime.getTime()) / (1000 * 60 * 60);
    const daysSinceLastNotification = hoursSinceLastNotification / 24;

    // Qu√° h·∫°n (daysLeft < 0): g·ª≠i m·ªói ng√†y
    if (daysLeft < 0) {
      return daysSinceLastNotification >= 1;
    }

    // 1-3 ng√†y: g·ª≠i m·ªói ng√†y
    if (daysLeft >= 1 && daysLeft <= 3) {
      return daysSinceLastNotification >= 1;
    }

    // 4-21 ng√†y (1-3 tu·∫ßn): g·ª≠i m·ªói tu·∫ßn
    if (daysLeft >= 4 && daysLeft <= 21) {
      return daysSinceLastNotification >= 7;
    }

    // 22-90 ng√†y (1-3 th√°ng): g·ª≠i m·ªói th√°ng
    if (daysLeft >= 22 && daysLeft <= 90) {
      return daysSinceLastNotification >= 30;
    }

    // > 90 ng√†y: kh√¥ng g·ª≠i th√¥ng b√°o
    return false;
  }

  /**
   * ƒê·ªãnh d·∫°ng message d·ª±a v√†o th·ªùi gian c√≤n l·∫°i
   */
  private formatNotificationMessage(
    caseName: string,
    daysLeft: number,
    deadline: Date,
  ): { title: string; body: string; type: NotificationTypeEnum } {
    const formattedDate = deadline.toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });

    // Qu√° h·∫°n
    if (daysLeft < 0) {
      const daysOverdue = Math.abs(daysLeft);
      return {
        type: NotificationTypeEnum.CASE_OVERDUE,
        title: 'üö® V·ª• √°n ƒë√£ qu√° h·∫°n',
        body: `V·ª• √°n "${caseName}" ƒë√£ qu√° h·∫°n ${daysOverdue} ng√†y (h·∫°n: ${formattedDate}). Vui l√≤ng x·ª≠ l√Ω ngay!`,
      };
    }

    // 1-3 ng√†y
    if (daysLeft >= 1 && daysLeft <= 3) {
      return {
        type: NotificationTypeEnum.CASE_DEADLINE_SOON,
        title: '‚è∞ V·ª• √°n s·∫Øp h·∫øt h·∫°n',
        body: `V·ª• √°n "${caseName}" s·∫Ω h·∫øt h·∫°n trong ${daysLeft} ng√†y (${formattedDate}). Vui l√≤ng x·ª≠ l√Ω s·ªõm!`,
      };
    }

    // 4-21 ng√†y (1-3 tu·∫ßn)
    if (daysLeft >= 4 && daysLeft <= 21) {
      const weeksLeft = Math.ceil(daysLeft / 7);
      return {
        type: NotificationTypeEnum.CASE_DEADLINE_SOON,
        title: 'üìÖ Nh·∫Øc nh·ªü v·ª• √°n',
        body: `V·ª• √°n "${caseName}" s·∫Ω h·∫øt h·∫°n trong ${weeksLeft} tu·∫ßn (${formattedDate}). Vui l√≤ng theo d√µi ti·∫øn ƒë·ªô.`,
      };
    }

    // 22-90 ng√†y (1-3 th√°ng)
    if (daysLeft >= 22 && daysLeft <= 90) {
      const monthsLeft = Math.ceil(daysLeft / 30);
      return {
        type: NotificationTypeEnum.CASE_DEADLINE_SOON,
        title: 'üìå Nh·∫Øc nh·ªü v·ª• √°n',
        body: `V·ª• √°n "${caseName}" s·∫Ω h·∫øt h·∫°n trong kho·∫£ng ${monthsLeft} th√°ng (${formattedDate}). Vui l√≤ng l√™n k·∫ø ho·∫°ch x·ª≠ l√Ω.`,
      };
    }

    // M·∫∑c ƒë·ªãnh
    return {
      type: NotificationTypeEnum.CASE_DEADLINE_SOON,
      title: 'üìã Th√¥ng b√°o v·ª• √°n',
      body: `V·ª• √°n "${caseName}" c√≥ h·∫°n x·ª≠ l√Ω v√†o ${formattedDate}.`,
    };
  }

  /**
   * Ch·∫°y m·ªói ng√†y l√∫c 9:00 s√°ng ƒë·ªÉ ki·ªÉm tra deadline c√°c v·ª• √°n
   * Logic th√¥ng b√°o:
   * - Qu√° h·∫°n: th√¥ng b√°o m·ªói ng√†y
   * - C√≤n 1-3 ng√†y: th√¥ng b√°o m·ªói ng√†y
   * - C√≤n 1-3 tu·∫ßn: th√¥ng b√°o m·ªói tu·∫ßn
   * - C√≤n 1-3 th√°ng: th√¥ng b√°o m·ªói th√°ng
   */
  @Cron(CronExpression.EVERY_DAY_AT_9AM)
  async checkCaseDeadlines() {
    return this.runDeadlineCheck();
  }

  /**
   * Method c√¥ng khai ƒë·ªÉ test ho·∫∑c trigger manually
   */
  async runDeadlineCheck() {
    this.logger.log('üîî B·∫Øt ƒë·∫ßu ki·ªÉm tra deadline c√°c v·ª• √°n...');

    const now = new Date();
    const threeMonthsLater = new Date();
    threeMonthsLater.setDate(now.getDate() + 90);

    try {
      // L·∫•y t·∫•t c·∫£ cases ƒëang x·ª≠ l√Ω c√≥ deadline trong v√≤ng 3 th√°ng ho·∫∑c ƒë√£ qu√° h·∫°n
      const casesWithDeadline = await this.db
        .select({
          caseId: casesTable.id,
          caseName: casesTable.name,
          userId: casesTable.userId,
          latestEndDate: sql<Date>`MAX(${casePhasesTable.endDate})`.mapWith(
            (val) => (val ? new Date(val) : null),
          ),
        })
        .from(casesTable)
        .innerJoin(casePhasesTable, eq(casesTable.id, casePhasesTable.caseId))
        .where(
          and(
            isNotNull(casesTable.userId),
            eq(casesTable.status, CaseStatusEnum.IN_PROGRESS),
            isNotNull(casePhasesTable.endDate),
          ),
        )
        .groupBy(casesTable.id, casesTable.name, casesTable.userId);

      this.logger.log(
        `üìä T√¨m th·∫•y ${casesWithDeadline.length} v·ª• √°n ƒëang x·ª≠ l√Ω`,
      );

      let sentCount = 0;
      let skippedCount = 0;

      // X·ª≠ l√Ω t·ª´ng case
      for (const caseItem of casesWithDeadline) {
        if (!caseItem.userId || !caseItem.latestEndDate) continue;

        // T√≠nh s·ªë ng√†y c√≤n l·∫°i
        const daysLeft = Math.ceil(
          (caseItem.latestEndDate.getTime() - now.getTime()) /
            (1000 * 60 * 60 * 24),
        );

        // B·ªè qua n·∫øu > 90 ng√†y
        if (daysLeft > 90) {
          continue;
        }

        // Ki·ªÉm tra l·∫ßn g·ª≠i notification cu·ªëi
        const lastNotificationTime = await this.getLastNotificationTime(
          caseItem.caseId,
          caseItem.userId,
        );

        // Ki·ªÉm tra xem c√≥ n√™n g·ª≠i kh√¥ng
        if (!this.shouldSendNotification(daysLeft, lastNotificationTime)) {
          skippedCount++;
          continue;
        }

        // T·∫°o message ph√π h·ª£p
        const notification = this.formatNotificationMessage(
          caseItem.caseName || 'V·ª• √°n',
          daysLeft,
          caseItem.latestEndDate,
        );

        // G·ª≠i notification v·ªõi error handling
        try {
          const result = await this.notificationsService.createNotification({
            userId: caseItem.userId,
            caseId: caseItem.caseId,
            type: notification.type,
            title: notification.title,
            body: notification.body,
          });

          if (result) {
            sentCount++;
            this.logger.log(
              `‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho user ${caseItem.userId} v·ªÅ case ${caseItem.caseId} (c√≤n ${daysLeft} ng√†y)`,
            );
          } else {
            // User kh√¥ng t·ªìn t·∫°i, ƒë√£ b·ªè qua
            skippedCount++;
          }
        } catch (error) {
          this.logger.error(
            `‚ùå L·ªói khi g·ª≠i th√¥ng b√°o cho case ${caseItem.caseId}:`,
            error instanceof Error ? error.message : error,
          );
          skippedCount++;
        }
      }

      this.logger.log(
        `‚ú® Ho√†n th√†nh ki·ªÉm tra deadline: ƒê√£ g·ª≠i ${sentCount} th√¥ng b√°o, b·ªè qua ${skippedCount} (ch∆∞a ƒë·∫øn l·∫ßn g·ª≠i ti·∫øp theo ho·∫∑c user kh√¥ng t·ªìn t·∫°i)`,
      );
    } catch (error) {
      this.logger.error('‚ùå L·ªói khi ki·ªÉm tra deadline:', error);
    }
  }
}
